const AppError = require("../utils/appError");

/*
 * err:it contain detail of duplicate fields error
 */
const handleDuplicateFieldsDB = err => {
    const value = err.message.match(/(["'])(\\?.)*?\1/)[0];
    const message = `Duplicate field value:${value},please use another value!`;
    return new AppError(message, 400)
}

const handleJWTError = () => new AppError('Invalid token,please log in again', 401)

const handleJWTExpiredError = () => new AppError('Your token has expired,please log in again.', 401)

/*
 * err:it contain detail of validation error
 */
const handleValidationErrorDB = err => {
    // console.log(err);
    const errors = Object.values(err.errors).map(el => el.message)
    const message = `Invalid input data.${errors.join('. ')}`;
    return new AppError(message, 400);
}

/*
 * err:it contain detail of cast error(like invalid id)
 */
const handleCastErrorDB = err => {

    const message = `Invalid ${err.path}:${err.value}.`
    return new AppError(message, 400);
}

/*
 * err:contain detail of error,which are generated by developer
 * req:contain api path,when we pass something wrong in api and data 
 * res:get back response from api request
 */
const sendErrorDev = (err, req, res) => {
    console.log("hiii")
    //A)API
    if (req.originalUrl.startsWith('/api')) {
        return res.status(err.statusCode).json({
            statusCode: err.statusCode,
            status: err.status,
            message: err.message
        });
    }

    // B)RENDERED WEBSITE
    console.log('ERROR ðŸ’¥', err);
    return res.status(err.statusCode).render('error', {
        statusCode: err.statusCode,
        status: err.status,
        message: "Something went wrong!\n" + err.message
    });
}

/*
 * err:contain detail of error,which are generated by users(like invalid credentials)
 * res:get back response from api request
 */
const sendErrorProd = (err, res) => {
    if (err.isOperational) {
        res.status(err.statusCode).json({
            statusCode: err.statusCode,
            status: err.status,
            message: err.message,
            // status: err.status,
            // error: err,
            // message: err.message
        })
    } else {
        console.log('ERROR', err)
    }
}

/*
 * err:contain detail of error(which are generate,when user render or enter some wrong credentials)
 * req:contain request,which user give 
 * res:get back response from api request
 * next:is middleware
 */
module.exports = (err, req, res, next) => {
    err.statusCode = err.statusCode || 500;
    err.status = err.status || 'error';

    if (process.env.NODE_ENV === 'development') {
        sendErrorDev(err, req, res);
    }

    if (process.env.NODE_ENV === 'production') {
        let error = err;

        if (error.name === 'CastError') { error = handleCastErrorDB(error) };
        if (error.code === 11000) { error = handleDuplicateFieldsDB(error) };
        if (error.name === 'ValidationError') { error = handleValidationErrorDB(error) }
        if (error.name === 'JsonWebTokenError') { error = handleJWTError() }
        if (error.name === 'TokenExpiredError') { error = handleJWTExpiredError() }

        sendErrorProd(error, res)
    }
}
